plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
load(mtcars)
mtcars
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot( data = mtcars, mpg ~ cy)
boxplot( data = mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(datasets)
data(iris)
?iris
summary(iris)
head(iris)
?lapply
?sapply
sapply(iris$Sepal.Length)
sapply(iris$Sepal.Length,mean)
table(iris$Sepal.Length)
d1-<table(iris$Sepal.Length)
d1<-table(iris$Sepal.Length)
d1
clear d1
cl d1
library(datasets)
load(iris)
data(iris)
summary(iris)
tapply(iris$virginica, flags$Sepal.Length, mean)
tapply(iris$virginica, iris$Sepal.Length, mean)
tapply(iris$virginica, iris$Sepal.Length, summary)
sapply(iris$virginica, iris$Sepal.Length, summary)
sepal<-iris[iris$Sepal.Length]
sepal<-iris[iris$Sepal.Length,]
summary(sepal)
head(sepal)
sepal<-iris[iris$Sepal.Length]
sepal<-iris[iris$Sepal.Length[1:length(iris)]]
sepal
head(sepal)
sepal<-iris[,iris$Sepal.Length]
dim(iris)
virginica<-data.frame(iris[iris$Specis == "virginica"])
str(virginica)
head(virginica)
virginica
virginica<-data.frame(iris[iris$Species == "virginica"])
virginica<-data.frame(iris[iris$Species == "virginica",])
summary(virginica)
mean(virginica$Sepal.Length)
colMean(iris)
colMeans(iris)
class(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
str(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
with(mtcars, tapply(mpg, cyl, mean))
?inv
?mean
?inverse
library(swirl)
swirl()
exit
quit
q()
ibrary(swirl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf -> read.csv("oath2csv", stringsAsFactors = FALSE)
mydf <- read.csv("oath2csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
| r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(-5:20)
select(cran, -5:20)
5:20
info()
main()
-5:20
-(5:20)
select(cran,-(5:20))
select(cran,-(5:size(cran)))
select(cran,-(5:20)
)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cra2 <- select(cran,size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),pi_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
exit
quit
exit()
quit()
library(swirl)
swirl()
View(students3)
View(students3)
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?extract_numeric
submit()
submit()
submit()
class = class1:class5
class <- class1:class5
class <- c(class1:class5)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
passed
failed <- failed %>% mutate(status = "failed"
)
bind_rows(passed, failed)
sat
sat
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package =
| lubridate)
help(package = lubridate)
this_day <- today()
print(this_day)
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
ymd(25081985)
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd_hms(dt2)
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_momment <- update(this_moment, hours = 8, minutes = 34)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_momment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
exit
quit
getwd()
dir
ls
clear
clc
getwd()
setwd("E:/DOCS/Coursera_Data_Science/Module3/quiz1")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "./quiz1.csv")
dateDownloaded <- date()
head(quiz.csv)
head("quiz.csv")
quiz.csv
head(quiz1.csv)
head("quiz1.csv")
?head
?data.frame
?head
class(quiz1.csv)
class("quiz1.csv")
dataquiz1 <- data.frame(quiz1.csv)
dataquiz1 <- data.frame("quiz1.csv")
class(dataquiz1)
head(dataquiz1)
dataquiz1
read(quiz1.csv)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" download.file(fileUrl, destfile="./data/microdata.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/microdata.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./quiz1.csv", method="curl")
download.file(fileUrl, destfile="./quiz1.csv", method="curl")
download.file(fileUrl, destfile="./quiz1.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./quiz1.csv")
quiz1data <- read.table("./quiz1.csv", sep=",", header=TRUE)
head(quiz1data)
sum(!is.na(quiz1data$VAL[quiz1data$VAL==24]))
quiz1data$FES
head(quiz1data$FES)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./quiz1_3.csv")
quiz13data <- read.table("./quiz1_3.csv", sep=",", header=TRUE)
download.file(fileUrl, destfile="./quiz1_3.xls")
quiz13data <- read.table("./quiz1_3.xls", sep=",", header=TRUE)
library(xlsx)
install(xlsx)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile="./data/nga.xlsx", method="curl")
download.file(fileUrl, destfile="./data/nga.xlsx")
download.file(fileUrl, destfile="./quiz1_3.xlsx")
dateDownloaded <- date()
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("Java")
library(xlsx)
dat <- read.xlsx("./quiz1_3.xlsx", sheetIndex=1, header=TRUE, colIndex=7:15, rowIndex=18:23)
install.packages("xlsx", dep = T
)
library(xlsx)
library(xlsx)
library(rJava)
library(xlsx)
library(rJava)
library(xlsx)
library(rJava)
library(xlsx)
iinstall.packages(xlsx)
install.packages(xlsx)
install.package(xlsx)
install.packages("xlsx", dep = T)
library(xlsx)
library(rJava)
install.packages("rJava", dep = T)
library(rJava)
library(xlsx)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
install.packages("xml")
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
?xmlTreeParse
doc
rootNode <- xmlRoot(doc)
rootNode
head(rootNode)
sum(xpathSApply(rootNode, "//zipcode", xmlValue)==21231)
install.packages(rMySQL)
install.packages("RMySQL")
source("http:..bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("XML
")"
)
install.packages("XML")
exit
quit()
demo()
license()
citation()
install.packages("reshpare2")
install.packages("reshape2")
library(reshape2)
?melt()
?dcast()
demo()
demo(graphics)
rm(all)
rm("all")
rm(pin)
rm(scale)
rm(x)
rm("")
rm()
quit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "grenn")
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", mail = "Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
library(swirl)
swirl()
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == east)
east <- subset(pollution, region == "east")
head(east)
hist(east$om25, col = "green")
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution,region=="west")$pm25, col = "green")
kjlkj
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(12, lwd = 2, oty = 2)
abline(h = 12, lwd = 2, oty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful,plot)
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dve.cur()
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
q()
help()
help("median")
?median
quit
quit()
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
quit()
?png()
?quartz()
?pdf()
?quartz()
?bitmap()
?par()
setwd("E:/DOCS/Coursera_Data_Science/Module4/project1")
?read.csv
dataset1 <- read.csv("./Data/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
dataset1 <- read.csv("./exdata_data_household_power_consumption/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
head(dataset1)
dataset2 <- subset(dataset1, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
dataset1$Date <- as.Date(dataset1$Date, format="%d/%m/%Y")
head(dataset1)
dataset2 <- subset(dataset1, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
head(ddataset2)
head(dataset2)
?strptime()
datetime <- paste(as.Date(dataset2$Date), dataset2$Time)
head(dataset2)
dataset2$Datetime <- as.POSIXct(datetime)
head(dataset2)
class(dataset2$Time)
strptime(dataset2$Time)
strptime(dataset2$Time, format="")
dataset2$Time<-strptime(dataset2$Time, format="")
head(dataset2)
dataset1 <- read.csv("./exdata_data_household_power_consumption/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
head(dataset1)
dataset1$Date <- as.Date(dataset1$Date, format="%d/%m/%Y")
head(dataset1)
dataset2 <- subset(dataset1, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
head(dataset2)
class(dataset2$Time)
class(dataset2$Date)
rm(dataset1)
datetime <- paste(as.Date(data$Date), data$Time)
datetime <- paste(as.Date(dataset2$Date), dataset2$Time)
head(datetime)
datetime
Time<-as.POSIXct(dataset2$Time,format="%H:%M:%S")
head(Time)
head(datetime)
class(Time)
strptime(Time,format="")
Time2<-strptime(Time,format="")
head(Time,Time2)
head(Time)
head(Time2)
class(Time2)
head(Time)
head(datetime)
head(Time)
datetime <- paste(as.Date(dataset2$Date), dataset2$Time)
dataset2$Datetime <- as.POSIXct(datetime)
head(dataset2)
dataset2$Time <- as.POSIXct(dataset2$Time)
dataset2$Time <- strptime(Dataset2@Time, format="")
dataset2$Time <- strptime(dataset2$Time, format="")
head(dataset2)
